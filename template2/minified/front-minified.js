// ANKI PERSISTENCE
// v1.1.8 - https://github.com/SimonLammer/anki-persistence/blob/584396fea9dea0921011671a47a0fdda19265e62/script.js
if (void 0 === window.Persistence) { var e = "github.com/SimonLammer/anki-persistence/", t = "_default"; if (window.Persistence_sessionStorage = function () { var i = !1; try { "object" == typeof window.sessionStorage && (i = !0, this.clear = function () { for (var t = 0; t < sessionStorage.length; t++) { var i = sessionStorage.key(t); 0 == i.indexOf(e) && (sessionStorage.removeItem(i), t--) } }, this.setItem = function (i, n) { void 0 == n && (n = i, i = t), sessionStorage.setItem(e + i, JSON.stringify(n)) }, this.getItem = function (i) { return void 0 == i && (i = t), JSON.parse(sessionStorage.getItem(e + i)) }, this.removeItem = function (i) { void 0 == i && (i = t), sessionStorage.removeItem(e + i) }, this.getAllKeys = function () { for (var t = [], i = Object.keys(sessionStorage), n = 0; n < i.length; n++) { var s = i[n]; 0 == s.indexOf(e) && t.push(s.substring(e.length, s.length)) } return t.sort() }) } catch (n) { } this.isAvailable = function () { return i } }, window.Persistence_windowKey = function (i) { var n = window[i], s = !1; "object" == typeof n && (s = !0, this.clear = function () { n[e] = {} }, this.setItem = function (i, s) { void 0 == s && (s = i, i = t), n[e][i] = s }, this.getItem = function (i) { return void 0 == i && (i = t), void 0 == n[e][i] ? null : n[e][i] }, this.removeItem = function (i) { void 0 == i && (i = t), delete n[e][i] }, this.getAllKeys = function () { return Object.keys(n[e]) }, void 0 == n[e] && this.clear()), this.isAvailable = function () { return s } }, window.Persistence = new Persistence_sessionStorage, Persistence.isAvailable() || (window.Persistence = new Persistence_windowKey("py")), !Persistence.isAvailable()) { var i = window.location.toString().indexOf("title"), n = window.location.toString().indexOf("main", i); i > 0 && n > 0 && n - i < 10 && (window.Persistence = new Persistence_windowKey("qt")) } }

// MULTIPLE CHOICE
// See https://github.com/ale18V/Anki-Multiple-Choice/tree/master/template2
var isMobile=0!==document.getElementsByClassName("mobile").length,isDesktop=!isMobile,Debug=document.getElementById("multiple-choice-debug");function init(){let e=parseChoices(),t=document.getElementsByClassName("multiple-choice-button"),n=null;if(Persistence.isAvailable()){if(e.length<t.length){log("Not enough choices: You wanted to generate "+t.length+" choices yet the field contains "+e.length+" choices.");return}}else{log("Persistence not available: multiple choices will not work.");return}let i=randomInt(0,t.length-1);t[i].innerHTML=s(0),Persistence.setItem("correctButton",i);for(let l=0;l<t.length;l++){let o=t[l];isMobile?o.addEventListener("touchstart",c):isDesktop&&o.addEventListener("click",c),l!==i&&(o.innerHTML=s(randomInt(0,e.length-1))),o.setAttribute("Index",l),Persistence.setItem(o.getAttribute("Index"),o.innerHTML)}function s(t){return e.splice(t,1)[0]}function c(){Persistence.setItem("choosenButton",this.getAttribute("Index")),null!==n&&n.classList.remove("multiple-choice-selected"),n=this,n.classList.add("multiple-choice-selected")}}function log(e){void 0!==Debug&&null!=Debug&&(Debug.innerHTML+=e+"<br>")}function randomInt(e,t){let n=0;return t>=e&&(n=Math.floor(Math.random()*(t-e)+e+.5)),n}function parseChoices(){return"{{Choices}}".split("<br>")}init();